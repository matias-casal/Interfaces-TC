name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint --workspaces

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: messaging_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma Client
      run: |
        npm run prisma:generate --workspace=auth-service
        npm run prisma:generate --workspace=user-service
        npm run prisma:generate --workspace=messaging-service

    - name: Run database migrations
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messaging_test
      run: |
        npm run prisma:push --workspace=auth-service
        npm run prisma:push --workspace=user-service
        npm run prisma:push --workspace=messaging-service

    - name: Run unit tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/messaging_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
      run: npm test --workspaces

    - name: Generate coverage report
      run: npm run test:coverage --workspaces --if-present

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build Auth Service
      run: docker build -t messaging-app/auth-service:${{ github.sha }} ./auth-service

    - name: Build User Service
      run: docker build -t messaging-app/user-service:${{ github.sha }} ./user-service

    - name: Build Messaging Service
      run: docker build -t messaging-app/messaging-service:${{ github.sha }} ./messaging-service

    - name: Build Real-time Service
      run: docker build -t messaging-app/real-time-service:${{ github.sha }} ./real-time-service

    - name: Build Nginx Gateway
      run: docker build -t messaging-app/nginx:${{ github.sha }} ./nginx

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Check Docker version
      run: docker --version

    - name: Create .env file for CI
      run: cp .env.ci .env

    - name: Start services
      run: |
        docker compose up -d
        echo "Waiting for services to start and run automatic migrations..."
        sleep 40

    - name: Check Nginx Gateway
      run: |
        curl -f http://localhost/nginx-health || exit 1

    - name: Check service health through Nginx
      run: |
        curl -f http://localhost/health/auth || exit 1
        curl -f http://localhost/health/users || exit 1
        curl -f http://localhost/health/messaging || exit 1
        curl -f http://localhost/health/realtime || exit 1

    - name: Install test dependencies
      run: npm ci

    - name: Run integration tests
      run: node test-integration.js

    - name: Stop services
      if: always()
      run: docker compose down -v

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Run npm audit
      run: npm audit --workspaces
      continue-on-error: true

    - name: Run Trivy security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '0'
        severity: 'CRITICAL,HIGH'