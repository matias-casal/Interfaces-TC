events {
    worker_connections 1024;
}

http {
    # Logging configuration
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';

    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;

    # Upstream configuration for Auth Service
    upstream auth_service {
        server auth-service:3001;
    }

    # Upstream configuration for User Service
    upstream user_service {
        server user-service:3002;
    }

    # Upstream configuration for Messaging Service
    upstream messaging_service {
        server messaging-service:3003;
    }

    # Upstream configuration for Real-time Service with sticky sessions
    # ip_hash ensures that requests from the same client IP always go to the same backend
    upstream realtime_service {
        ip_hash;  # Sticky sessions based on client IP
        server real-time-service:3004;
        # Add more instances here when scaling horizontally
        # server real-time-service-2:3004;
        # server real-time-service-3:3004;
    }

    # Main server configuration
    server {
        listen 80;
        server_name localhost;

        # Health check endpoint for Nginx
        location /nginx-health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }

        # Auth Service proxy
        location /auth {
            proxy_pass http://auth_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # User Service proxy
        location /users {
            proxy_pass http://user_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Messaging Service proxy
        location /messages {
            proxy_pass http://messaging_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # Chats endpoint
        location /chats {
            proxy_pass http://messaging_service;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
        }

        # WebSocket/Real-time Service proxy with sticky sessions
        location /socket.io {
            proxy_pass http://realtime_service;

            # WebSocket specific settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Session affinity headers
            proxy_set_header X-Nginx-Proxy true;

            # Timeouts for WebSocket
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;

            # WebSocket frame size
            proxy_max_temp_file_size 0;
            client_max_body_size 10m;

            # Keep alive
            proxy_set_header Connection "upgrade";
            proxy_set_header X-Forwarded-Host $server_name;
        }

        # Alternative WebSocket endpoint
        location /ws/ {
            proxy_pass http://realtime_service/;

            # WebSocket specific settings
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";

            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts for WebSocket
            proxy_connect_timeout 7d;
            proxy_send_timeout 7d;
            proxy_read_timeout 7d;

            # Disable buffering for WebSocket
            proxy_buffering off;
            proxy_cache off;
        }

        # Service health checks
        location /health/auth {
            proxy_pass http://auth_service/health;
            access_log off;
        }

        location /health/users {
            proxy_pass http://user_service/health;
            access_log off;
        }

        location /health/messaging {
            proxy_pass http://messaging_service/health;
            access_log off;
        }

        location /health/realtime {
            proxy_pass http://realtime_service/health;
            access_log off;
        }

        # Root location
        location / {
            return 200 "Messaging App API Gateway\n";
            add_header Content-Type text/plain;
        }
    }

    # Additional server block for scaling (when needed)
    # This allows running multiple instances of real-time service
    # server {
    #     listen 81;
    #     server_name localhost;
    #
    #     location / {
    #         proxy_pass http://realtime_service;
    #         proxy_http_version 1.1;
    #         proxy_set_header Upgrade $http_upgrade;
    #         proxy_set_header Connection "upgrade";
    #         proxy_set_header Host $host;
    #         proxy_set_header X-Real-IP $remote_addr;
    #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     }
    # }

    # Optimization settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/rss+xml application/atom+xml image/svg+xml text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype;
}