version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: messaging-db-prod
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME:-messaging_db}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - messaging-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: messaging-redis-prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - messaging-network
    restart: always
    healthcheck:
      test: ["CMD", "redis-cli", "--auth", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth-service:
    image: messaging-app/auth-service:latest
    container_name: auth-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
      - JWT_EXPIRE_TIME=7d
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - messaging-network
    restart: always

  user-service:
    image: messaging-app/user-service:latest
    container_name: user-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks:
      - messaging-network
    restart: always

  messaging-service:
    image: messaging-app/messaging-service:latest
    container_name: messaging-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@postgres:5432/${DB_NAME}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
      - USER_SERVICE_URL=http://user-service:3002
      - INTERNAL_SERVICE_TOKEN=${INTERNAL_SERVICE_TOKEN}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "3003:3003"
    networks:
      - messaging-network
    restart: always

  real-time-service:
    image: messaging-app/real-time-service:latest
    container_name: real-time-service-prod
    environment:
      - NODE_ENV=production
      - PORT=3004
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      redis:
        condition: service_healthy
    ports:
      - "3004:3004"
    networks:
      - messaging-network
    restart: always

  nginx:
    image: nginx:alpine
    container_name: messaging-nginx-prod
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - auth-service
      - user-service
      - messaging-service
      - real-time-service
    networks:
      - messaging-network
    restart: always

networks:
  messaging-network:
    driver: bridge

volumes:
  postgres_data_prod:
  redis_data_prod:
