#!/bin/bash

# Example cURL Commands for Testing the Messaging App
# This file contains ready-to-use curl commands for testing

echo "ðŸ“š Messaging App - cURL Command Examples"
echo "========================================"
echo ""
echo "These are example commands. Replace the values with your own data."
echo ""

# Generate example data
TIMESTAMP=$(date +%s)
USER1="alice_$TIMESTAMP"
USER2="bob_$TIMESTAMP"
PUBLIC_KEY="-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA1234567890\n-----END PUBLIC KEY-----"

echo "1. REGISTER A NEW USER"
echo "----------------------"
echo "curl -X POST http://localhost/auth/register \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"username\": \"$USER1\","
echo "    \"password\": \"SecurePass123@\","
echo "    \"publicKey\": \"$PUBLIC_KEY\""
echo "  }'"
echo ""

echo "2. LOGIN"
echo "--------"
echo "curl -X POST http://localhost/auth/login \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{"
echo "    \"username\": \"$USER1\","
echo "    \"password\": \"SecurePass123@\""
echo "  }'"
echo ""

echo "3. GET USER PROFILE"
echo "-------------------"
echo "# Replace TOKEN with the token from login response"
echo "curl -X GET http://localhost/users/$USER2 \\"
echo "  -H \"Authorization: Bearer TOKEN\""
echo ""

echo "4. SEND A MESSAGE"
echo "-----------------"
echo "# Replace TOKEN and generate a unique UUID for clientMessageId"
echo "curl -X POST http://localhost/messages \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer TOKEN\" \\"
echo "  -d '{"
echo "    \"receiverUsername\": \"$USER2\","
echo "    \"encryptedText\": \"SGVsbG8gV29ybGQh\","
echo "    \"clientMessageId\": \"550e8400-e29b-41d4-a716-446655440000\""
echo "  }'"
echo ""

echo "5. LIST CHATS"
echo "-------------"
echo "curl -X GET \"http://localhost/chats?limit=10&offset=0\" \\"
echo "  -H \"Authorization: Bearer TOKEN\""
echo ""

echo "6. GET MESSAGES IN A CHAT"
echo "-------------------------"
echo "# Replace CHAT_ID with actual chat ID from list chats response"
echo "curl -X GET \"http://localhost/chats/CHAT_ID/messages?limit=50\" \\"
echo "  -H \"Authorization: Bearer TOKEN\""
echo ""

echo "7. UPDATE MESSAGE STATUS"
echo "------------------------"
echo "# Replace MESSAGE_ID with actual message ID"
echo "# Status can be: delivered, read"
echo "curl -X PATCH \"http://localhost/messages/MESSAGE_ID/status\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Authorization: Bearer TOKEN\" \\"
echo "  -d '{\"status\": \"delivered\"}'"
echo ""

echo "8. HEALTH CHECKS"
echo "----------------"
echo "# No authentication required for health checks"
echo "curl http://localhost/health/auth"
echo "curl http://localhost/health/users"
echo "curl http://localhost/health/messaging"
echo "curl http://localhost/health/realtime"
echo ""

echo "9. WEBSOCKET CONNECTION (using socket.io-client)"
echo "------------------------------------------------"
echo "# Install: npm install -g socket.io-client"
echo "# Then use in Node.js:"
echo "const io = require('socket.io-client');"
echo "const socket = io('http://localhost', {"
echo "  auth: { token: 'YOUR_JWT_TOKEN' }"
echo "});"
echo ""

echo "ðŸ’¡ TIP: Save tokens to variables for easier testing:"
echo "TOKEN=\$(curl -s -X POST http://localhost/auth/login -H \"Content-Type: application/json\" -d '{\"username\":\"$USER1\",\"password\":\"SecurePass123@\"}' | jq -r '.data.token')"
echo "echo \$TOKEN"